// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/sqlc-dev/pqtype"
)

type UserRole string

const (
	UserRoleFree  UserRole = "free"
	UserRolePaid  UserRole = "paid"
	UserRoleAdmin UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type ExamResult struct {
	ID              int32                 `json:"id"`
	UserID          int32                 `json:"user_id"`
	ExamNumber      int32                 `json:"exam_number"`
	MathScore       sql.NullInt32         `json:"math_score"`
	VerbalScore     sql.NullInt32         `json:"verbal_score"`
	MathTimeTaken   sql.NullInt32         `json:"math_time_taken"`
	VerbalTimeTaken sql.NullInt32         `json:"verbal_time_taken"`
	ExamData        pqtype.NullRawMessage `json:"exam_data"`
	CreatedAt       sql.NullTime          `json:"created_at"`
}

type Question struct {
	ID                 int32          `json:"id"`
	SubjectID          sql.NullInt32  `json:"subject_id"`
	QuestionText       string         `json:"question_text"`
	CorrectAnswer      string         `json:"correct_answer"`
	DifficultyLevel    sql.NullInt32  `json:"difficulty_level"`
	Explanation        sql.NullString `json:"explanation"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	Topic              sql.NullString `json:"topic"`
	Subtopic           sql.NullString `json:"subtopic"`
	SolveRate          sql.NullInt32  `json:"solve_rate"`
	Choices            []string       `json:"choices"`
	CorrectAnswerIndex sql.NullInt32  `json:"correct_answer_index"`
	Passage            sql.NullString `json:"passage"`
	Bluebook           bool           `json:"bluebook"`
	HtmlTable          sql.NullString `json:"html_table"`
	SvgImage           sql.NullString `json:"svg_image"`
	IsMultipleChoice   sql.NullBool   `json:"is_multiple_choice"`
}

type User struct {
	ID                   int32          `json:"id"`
	Username             string         `json:"username"`
	Role                 UserRole       `json:"role"`
	AvatarUrl            sql.NullString `json:"avatar_url"`
	TargetScore          sql.NullInt32  `json:"target_score"`
	PredictedTotalScore  sql.NullInt32  `json:"predicted_total_score"`
	TotalQuestionsSolved sql.NullInt32  `json:"total_questions_solved"`
	CreatedAt            sql.NullTime   `json:"created_at"`
}

type UserQuestion struct {
	ID             int32         `json:"id"`
	UserID         int32         `json:"user_id"`
	QuestionID     int32         `json:"question_id"`
	IsSolved       sql.NullBool  `json:"is_solved"`
	IsBookmarked   sql.NullBool  `json:"is_bookmarked"`
	TimeTaken      sql.NullInt32 `json:"time_taken"`
	CreatedAt      sql.NullTime  `json:"created_at"`
	Incorrect      bool          `json:"incorrect"`
	SelectedOption sql.NullInt32 `json:"selected_option"`
}

type UsersSkill struct {
	ID         int32        `json:"id"`
	UserID     int32        `json:"user_id"`
	SkillName  string       `json:"skill_name"`
	SkillScore float32      `json:"skill_score"`
	CreatedAt  sql.NullTime `json:"created_at"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
}
