// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users_skills.sql

package db

import (
	"context"
)

const createUserSkill = `-- name: CreateUserSkill :one
INSERT INTO users_skills (
    user_id, skill_name, skill_score
) VALUES (
    $1, $2, $3
)
ON CONFLICT (user_id, skill_name) 
DO UPDATE SET
    skill_score = EXCLUDED.skill_score,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, user_id, skill_name, skill_score, created_at, updated_at
`

type CreateUserSkillParams struct {
	UserID     int32   `json:"user_id"`
	SkillName  string  `json:"skill_name"`
	SkillScore float32 `json:"skill_score"`
}

func (q *Queries) CreateUserSkill(ctx context.Context, arg CreateUserSkillParams) (UsersSkill, error) {
	row := q.db.QueryRowContext(ctx, createUserSkill, arg.UserID, arg.SkillName, arg.SkillScore)
	var i UsersSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkillName,
		&i.SkillScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserSkill = `-- name: DeleteUserSkill :exec
DELETE FROM users_skills
WHERE user_id = $1 AND skill_name = $2
`

type DeleteUserSkillParams struct {
	UserID    int32  `json:"user_id"`
	SkillName string `json:"skill_name"`
}

func (q *Queries) DeleteUserSkill(ctx context.Context, arg DeleteUserSkillParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSkill, arg.UserID, arg.SkillName)
	return err
}

const getUserSkillByName = `-- name: GetUserSkillByName :one
SELECT id, user_id, skill_name, skill_score, created_at, updated_at FROM users_skills
WHERE user_id = $1 AND skill_name = $2
`

type GetUserSkillByNameParams struct {
	UserID    int32  `json:"user_id"`
	SkillName string `json:"skill_name"`
}

func (q *Queries) GetUserSkillByName(ctx context.Context, arg GetUserSkillByNameParams) (UsersSkill, error) {
	row := q.db.QueryRowContext(ctx, getUserSkillByName, arg.UserID, arg.SkillName)
	var i UsersSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkillName,
		&i.SkillScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSkills = `-- name: GetUserSkills :many
SELECT id, user_id, skill_name, skill_score, created_at, updated_at FROM users_skills
WHERE user_id = $1
ORDER BY skill_name
`

func (q *Queries) GetUserSkills(ctx context.Context, userID int32) ([]UsersSkill, error) {
	rows, err := q.db.QueryContext(ctx, getUserSkills, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersSkill
	for rows.Next() {
		var i UsersSkill
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SkillName,
			&i.SkillScore,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserSkill = `-- name: UpdateUserSkill :one
UPDATE users_skills
SET 
    skill_score = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND skill_name = $2
RETURNING id, user_id, skill_name, skill_score, created_at, updated_at
`

type UpdateUserSkillParams struct {
	UserID     int32   `json:"user_id"`
	SkillName  string  `json:"skill_name"`
	SkillScore float32 `json:"skill_score"`
}

func (q *Queries) UpdateUserSkill(ctx context.Context, arg UpdateUserSkillParams) (UsersSkill, error) {
	row := q.db.QueryRowContext(ctx, updateUserSkill, arg.UserID, arg.SkillName, arg.SkillScore)
	var i UsersSkill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkillName,
		&i.SkillScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
