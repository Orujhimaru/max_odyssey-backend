// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, role, avatar_url, target_score
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, username, role, avatar_url, target_score, predicted_total_score, total_questions_solved, created_at
`

type CreateUserParams struct {
	Username    string
	Role        UserRole
	AvatarUrl   sql.NullString
	TargetScore sql.NullInt32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Role,
		arg.AvatarUrl,
		arg.TargetScore,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.AvatarUrl,
		&i.TargetScore,
		&i.PredictedTotalScore,
		&i.TotalQuestionsSolved,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, role, avatar_url, target_score, predicted_total_score, total_questions_solved, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.AvatarUrl,
		&i.TargetScore,
		&i.PredictedTotalScore,
		&i.TotalQuestionsSolved,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, role, avatar_url, target_score, predicted_total_score, total_questions_solved, created_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.AvatarUrl,
		&i.TargetScore,
		&i.PredictedTotalScore,
		&i.TotalQuestionsSolved,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserScore = `-- name: UpdateUserScore :one
UPDATE users
SET 
    predicted_total_score = $2,
    total_questions_solved = total_questions_solved + 1
WHERE id = $1
RETURNING id, username, role, avatar_url, target_score, predicted_total_score, total_questions_solved, created_at
`

type UpdateUserScoreParams struct {
	ID                  int32
	PredictedTotalScore sql.NullInt32
}

func (q *Queries) UpdateUserScore(ctx context.Context, arg UpdateUserScoreParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserScore, arg.ID, arg.PredictedTotalScore)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Role,
		&i.AvatarUrl,
		&i.TargetScore,
		&i.PredictedTotalScore,
		&i.TotalQuestionsSolved,
		&i.CreatedAt,
	)
	return i, err
}
