// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: questions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getQuestion = `-- name: GetQuestion :one
SELECT id, subject_id, question_text, correct_answer_index, difficulty_level, explanation, 
       created_at, topic, subtopic, solve_rate, choices
FROM questions 
WHERE id = $1
`

type GetQuestionRow struct {
	ID                 int32
	SubjectID          sql.NullInt32
	QuestionText       string
	CorrectAnswerIndex sql.NullInt32
	DifficultyLevel    sql.NullInt32
	Explanation        sql.NullString
	CreatedAt          sql.NullTime
	Topic              sql.NullString
	Subtopic           sql.NullString
	SolveRate          sql.NullInt32
	Choices            []string
}

func (q *Queries) GetQuestion(ctx context.Context, id int32) (GetQuestionRow, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i GetQuestionRow
	err := row.Scan(
		&i.ID,
		&i.SubjectID,
		&i.QuestionText,
		&i.CorrectAnswerIndex,
		&i.DifficultyLevel,
		&i.Explanation,
		&i.CreatedAt,
		&i.Topic,
		&i.Subtopic,
		&i.SolveRate,
		pq.Array(&i.Choices),
	)
	return i, err
}

const getQuestions = `-- name: GetQuestions :many
SELECT id, subject_id, question_text, correct_answer_index, difficulty_level, explanation, 
       created_at, topic, subtopic, solve_rate, choices
FROM questions
`

type GetQuestionsRow struct {
	ID                 int32
	SubjectID          sql.NullInt32
	QuestionText       string
	CorrectAnswerIndex sql.NullInt32
	DifficultyLevel    sql.NullInt32
	Explanation        sql.NullString
	CreatedAt          sql.NullTime
	Topic              sql.NullString
	Subtopic           sql.NullString
	SolveRate          sql.NullInt32
	Choices            []string
}

func (q *Queries) GetQuestions(ctx context.Context) ([]GetQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuestionsRow
	for rows.Next() {
		var i GetQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.CorrectAnswerIndex,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.CreatedAt,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
