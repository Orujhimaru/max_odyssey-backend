// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: questions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getFilteredQuestions = `-- name: GetFilteredQuestions :many
SELECT 
  id, subject_id, question_text, correct_answer_index, 
  difficulty_level, explanation, topic, subtopic, solve_rate, choices,
  COUNT(*) OVER() AS total_count
FROM questions
WHERE 
  ($1 = -1 OR subject_id = $1) AND 
  ($2 = -1 OR difficulty_level = $2) AND
  ($3 = '' OR topic = $3) AND
  ($4 = '' OR subtopic = $4)
ORDER BY 
  CASE WHEN $5 = 'asc' THEN solve_rate END ASC,
  CASE WHEN $5 = 'desc' THEN solve_rate END DESC
LIMIT $6 OFFSET $7
`

type GetFilteredQuestionsParams struct {
	Column1 interface{}
	Column2 interface{}
	Column3 interface{}
	Column4 interface{}
	Column5 interface{}
	Limit   int32
	Offset  int32
}

type GetFilteredQuestionsRow struct {
	ID                 int32
	SubjectID          sql.NullInt32
	QuestionText       string
	CorrectAnswerIndex sql.NullInt32
	DifficultyLevel    sql.NullInt32
	Explanation        sql.NullString
	Topic              sql.NullString
	Subtopic           sql.NullString
	SolveRate          sql.NullInt32
	Choices            []string
	TotalCount         int64
}

func (q *Queries) GetFilteredQuestions(ctx context.Context, arg GetFilteredQuestionsParams) ([]GetFilteredQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFilteredQuestions,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilteredQuestionsRow
	for rows.Next() {
		var i GetFilteredQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.CorrectAnswerIndex,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, subject_id, question_text, correct_answer_index, difficulty_level, explanation, 
       created_at, topic, subtopic, solve_rate, choices
FROM questions 
WHERE id = $1
`

type GetQuestionRow struct {
	ID                 int32
	SubjectID          sql.NullInt32
	QuestionText       string
	CorrectAnswerIndex sql.NullInt32
	DifficultyLevel    sql.NullInt32
	Explanation        sql.NullString
	CreatedAt          sql.NullTime
	Topic              sql.NullString
	Subtopic           sql.NullString
	SolveRate          sql.NullInt32
	Choices            []string
}

func (q *Queries) GetQuestion(ctx context.Context, id int32) (GetQuestionRow, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i GetQuestionRow
	err := row.Scan(
		&i.ID,
		&i.SubjectID,
		&i.QuestionText,
		&i.CorrectAnswerIndex,
		&i.DifficultyLevel,
		&i.Explanation,
		&i.CreatedAt,
		&i.Topic,
		&i.Subtopic,
		&i.SolveRate,
		pq.Array(&i.Choices),
	)
	return i, err
}

const getQuestions = `-- name: GetQuestions :many
SELECT id, subject_id, question_text, correct_answer_index, difficulty_level, explanation, 
       created_at, topic, subtopic, solve_rate, choices
FROM questions
`

type GetQuestionsRow struct {
	ID                 int32
	SubjectID          sql.NullInt32
	QuestionText       string
	CorrectAnswerIndex sql.NullInt32
	DifficultyLevel    sql.NullInt32
	Explanation        sql.NullString
	CreatedAt          sql.NullTime
	Topic              sql.NullString
	Subtopic           sql.NullString
	SolveRate          sql.NullInt32
	Choices            []string
}

func (q *Queries) GetQuestions(ctx context.Context) ([]GetQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuestionsRow
	for rows.Next() {
		var i GetQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.CorrectAnswerIndex,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.CreatedAt,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
