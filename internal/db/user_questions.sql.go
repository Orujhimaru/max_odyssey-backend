// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_questions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const checkUserQuestionExists = `-- name: CheckUserQuestionExists :one
SELECT EXISTS(
  SELECT 1 FROM user_questions 
  WHERE user_id = $1 AND question_id = $2
) AS exists
`

type CheckUserQuestionExistsParams struct {
	UserID     int32 `json:"user_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) CheckUserQuestionExists(ctx context.Context, arg CheckUserQuestionExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserQuestionExists, arg.UserID, arg.QuestionID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserQuestion = `-- name: CreateUserQuestion :one
INSERT INTO user_questions (
  user_id, question_id, is_solved, is_bookmarked, time_taken, incorrect, selected_option
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
`

type CreateUserQuestionParams struct {
	UserID         int32         `json:"user_id"`
	QuestionID     int32         `json:"question_id"`
	IsSolved       sql.NullBool  `json:"is_solved"`
	IsBookmarked   sql.NullBool  `json:"is_bookmarked"`
	TimeTaken      sql.NullInt32 `json:"time_taken"`
	Incorrect      bool          `json:"incorrect"`
	SelectedOption sql.NullInt32 `json:"selected_option"`
}

func (q *Queries) CreateUserQuestion(ctx context.Context, arg CreateUserQuestionParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, createUserQuestion,
		arg.UserID,
		arg.QuestionID,
		arg.IsSolved,
		arg.IsBookmarked,
		arg.TimeTaken,
		arg.Incorrect,
		arg.SelectedOption,
	)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}

const getUserBookmarkedQuestions = `-- name: GetUserBookmarkedQuestions :many
SELECT 
  q.id,
  q.subject_id,
  q.question_text,
  q.difficulty_level,
  q.explanation,
  q.topic,
  q.subtopic,
  q.solve_rate,
  q.choices,
  q.correct_answer_index,
  q.created_at,
  q.passage,
  uq.selected_option,
  COUNT(*) OVER() AS total_count
FROM questions q
JOIN user_questions uq ON q.id = uq.question_id
WHERE uq.user_id = $1 AND uq.is_bookmarked = TRUE
ORDER BY 
  CASE 
    WHEN $2 = 'desc' THEN q.solve_rate * -1  -- Multiply by -1 for descending
    ELSE q.solve_rate
  END
`

type GetUserBookmarkedQuestionsParams struct {
	UserID  int32       `json:"user_id"`
	Column2 interface{} `json:"column_2"`
}

type GetUserBookmarkedQuestionsRow struct {
	ID                 int32          `json:"id"`
	SubjectID          sql.NullInt32  `json:"subject_id"`
	QuestionText       string         `json:"question_text"`
	DifficultyLevel    sql.NullInt32  `json:"difficulty_level"`
	Explanation        sql.NullString `json:"explanation"`
	Topic              sql.NullString `json:"topic"`
	Subtopic           sql.NullString `json:"subtopic"`
	SolveRate          sql.NullInt32  `json:"solve_rate"`
	Choices            []string       `json:"choices"`
	CorrectAnswerIndex sql.NullInt32  `json:"correct_answer_index"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	Passage            sql.NullString `json:"passage"`
	SelectedOption     sql.NullInt32  `json:"selected_option"`
	TotalCount         int64          `json:"total_count"`
}

func (q *Queries) GetUserBookmarkedQuestions(ctx context.Context, arg GetUserBookmarkedQuestionsParams) ([]GetUserBookmarkedQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserBookmarkedQuestions, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserBookmarkedQuestionsRow
	for rows.Next() {
		var i GetUserBookmarkedQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
			&i.CorrectAnswerIndex,
			&i.CreatedAt,
			&i.Passage,
			&i.SelectedOption,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBookmarkedQuestionsAsc = `-- name: GetUserBookmarkedQuestionsAsc :many
SELECT 
  q.id,
  q.subject_id,
  q.question_text,
  q.difficulty_level,
  q.explanation,
  q.topic,
  q.subtopic,
  q.solve_rate,
  q.choices,
  q.correct_answer_index,
  q.created_at,
  q.passage,
  uq.selected_option,
  COUNT(*) OVER() AS total_count
FROM questions q
JOIN user_questions uq ON q.id = uq.question_id
WHERE uq.user_id = $1 AND uq.is_bookmarked = TRUE
ORDER BY q.solve_rate ASC
`

type GetUserBookmarkedQuestionsAscRow struct {
	ID                 int32          `json:"id"`
	SubjectID          sql.NullInt32  `json:"subject_id"`
	QuestionText       string         `json:"question_text"`
	DifficultyLevel    sql.NullInt32  `json:"difficulty_level"`
	Explanation        sql.NullString `json:"explanation"`
	Topic              sql.NullString `json:"topic"`
	Subtopic           sql.NullString `json:"subtopic"`
	SolveRate          sql.NullInt32  `json:"solve_rate"`
	Choices            []string       `json:"choices"`
	CorrectAnswerIndex sql.NullInt32  `json:"correct_answer_index"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	Passage            sql.NullString `json:"passage"`
	SelectedOption     sql.NullInt32  `json:"selected_option"`
	TotalCount         int64          `json:"total_count"`
}

func (q *Queries) GetUserBookmarkedQuestionsAsc(ctx context.Context, userID int32) ([]GetUserBookmarkedQuestionsAscRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserBookmarkedQuestionsAsc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserBookmarkedQuestionsAscRow
	for rows.Next() {
		var i GetUserBookmarkedQuestionsAscRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
			&i.CorrectAnswerIndex,
			&i.CreatedAt,
			&i.Passage,
			&i.SelectedOption,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBookmarkedQuestionsDesc = `-- name: GetUserBookmarkedQuestionsDesc :many
SELECT 
  q.id,
  q.subject_id,
  q.question_text,
  q.difficulty_level,
  q.explanation,
  q.topic,
  q.subtopic,
  q.solve_rate,
  q.choices,
  q.correct_answer_index,
  q.created_at,
  q.passage,
  uq.selected_option,
  COUNT(*) OVER() AS total_count
FROM questions q
JOIN user_questions uq ON q.id = uq.question_id
WHERE uq.user_id = $1 AND uq.is_bookmarked = TRUE
ORDER BY q.solve_rate DESC
`

type GetUserBookmarkedQuestionsDescRow struct {
	ID                 int32          `json:"id"`
	SubjectID          sql.NullInt32  `json:"subject_id"`
	QuestionText       string         `json:"question_text"`
	DifficultyLevel    sql.NullInt32  `json:"difficulty_level"`
	Explanation        sql.NullString `json:"explanation"`
	Topic              sql.NullString `json:"topic"`
	Subtopic           sql.NullString `json:"subtopic"`
	SolveRate          sql.NullInt32  `json:"solve_rate"`
	Choices            []string       `json:"choices"`
	CorrectAnswerIndex sql.NullInt32  `json:"correct_answer_index"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	Passage            sql.NullString `json:"passage"`
	SelectedOption     sql.NullInt32  `json:"selected_option"`
	TotalCount         int64          `json:"total_count"`
}

func (q *Queries) GetUserBookmarkedQuestionsDesc(ctx context.Context, userID int32) ([]GetUserBookmarkedQuestionsDescRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserBookmarkedQuestionsDesc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserBookmarkedQuestionsDescRow
	for rows.Next() {
		var i GetUserBookmarkedQuestionsDescRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
			&i.CorrectAnswerIndex,
			&i.CreatedAt,
			&i.Passage,
			&i.SelectedOption,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserQuestion = `-- name: GetUserQuestion :one
SELECT id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
FROM user_questions
WHERE user_id = $1 AND question_id = $2
`

type GetUserQuestionParams struct {
	UserID     int32 `json:"user_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) GetUserQuestion(ctx context.Context, arg GetUserQuestionParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, getUserQuestion, arg.UserID, arg.QuestionID)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}

const getUserQuestionByIDs = `-- name: GetUserQuestionByIDs :one
SELECT id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option FROM user_questions
WHERE user_id = $1 AND question_id = $2
`

type GetUserQuestionByIDsParams struct {
	UserID     int32 `json:"user_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) GetUserQuestionByIDs(ctx context.Context, arg GetUserQuestionByIDsParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, getUserQuestionByIDs, arg.UserID, arg.QuestionID)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}

const getUserQuestions = `-- name: GetUserQuestions :many
SELECT id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
FROM user_questions
WHERE user_id = $1
`

func (q *Queries) GetUserQuestions(ctx context.Context, userID int32) ([]UserQuestion, error) {
	rows, err := q.db.QueryContext(ctx, getUserQuestions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserQuestion
	for rows.Next() {
		var i UserQuestion
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.QuestionID,
			&i.IsSolved,
			&i.IsBookmarked,
			&i.TimeTaken,
			&i.CreatedAt,
			&i.Incorrect,
			&i.SelectedOption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSolvedQuestions = `-- name: GetUserSolvedQuestions :many
SELECT 
  q.id,
  q.subject_id,
  q.question_text,
  q.difficulty_level,
  q.explanation,
  q.topic,
  q.subtopic,
  q.solve_rate,
  q.choices,
  q.correct_answer_index,
  q.created_at,
  uq.selected_option
FROM questions q
JOIN user_questions uq ON q.id = uq.question_id
WHERE uq.user_id = $1 AND uq.is_solved = TRUE
`

type GetUserSolvedQuestionsRow struct {
	ID                 int32          `json:"id"`
	SubjectID          sql.NullInt32  `json:"subject_id"`
	QuestionText       string         `json:"question_text"`
	DifficultyLevel    sql.NullInt32  `json:"difficulty_level"`
	Explanation        sql.NullString `json:"explanation"`
	Topic              sql.NullString `json:"topic"`
	Subtopic           sql.NullString `json:"subtopic"`
	SolveRate          sql.NullInt32  `json:"solve_rate"`
	Choices            []string       `json:"choices"`
	CorrectAnswerIndex sql.NullInt32  `json:"correct_answer_index"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	SelectedOption     sql.NullInt32  `json:"selected_option"`
}

func (q *Queries) GetUserSolvedQuestions(ctx context.Context, userID int32) ([]GetUserSolvedQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserSolvedQuestions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSolvedQuestionsRow
	for rows.Next() {
		var i GetUserSolvedQuestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SubjectID,
			&i.QuestionText,
			&i.DifficultyLevel,
			&i.Explanation,
			&i.Topic,
			&i.Subtopic,
			&i.SolveRate,
			pq.Array(&i.Choices),
			&i.CorrectAnswerIndex,
			&i.CreatedAt,
			&i.SelectedOption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markQuestionSolved = `-- name: MarkQuestionSolved :one
UPDATE user_questions
SET 
    is_solved = TRUE,
    time_taken = $3,
    incorrect = $4,
    selected_option = $5
WHERE user_id = $1 AND question_id = $2
RETURNING id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
`

type MarkQuestionSolvedParams struct {
	UserID         int32         `json:"user_id"`
	QuestionID     int32         `json:"question_id"`
	TimeTaken      sql.NullInt32 `json:"time_taken"`
	Incorrect      bool          `json:"incorrect"`
	SelectedOption sql.NullInt32 `json:"selected_option"`
}

func (q *Queries) MarkQuestionSolved(ctx context.Context, arg MarkQuestionSolvedParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, markQuestionSolved,
		arg.UserID,
		arg.QuestionID,
		arg.TimeTaken,
		arg.Incorrect,
		arg.SelectedOption,
	)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}

const toggleBookmark = `-- name: ToggleBookmark :one
UPDATE user_questions
SET is_bookmarked = NOT is_bookmarked
WHERE user_id = $1 AND question_id = $2
RETURNING id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
`

type ToggleBookmarkParams struct {
	UserID     int32 `json:"user_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) ToggleBookmark(ctx context.Context, arg ToggleBookmarkParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, toggleBookmark, arg.UserID, arg.QuestionID)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}

const toggleSolved = `-- name: ToggleSolved :one
UPDATE user_questions
SET is_solved = NOT is_solved
WHERE user_id = $1 AND question_id = $2
RETURNING id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
`

type ToggleSolvedParams struct {
	UserID     int32 `json:"user_id"`
	QuestionID int32 `json:"question_id"`
}

func (q *Queries) ToggleSolved(ctx context.Context, arg ToggleSolvedParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, toggleSolved, arg.UserID, arg.QuestionID)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}

const updateUserQuestion = `-- name: UpdateUserQuestion :exec
UPDATE user_questions
SET is_solved = $3, is_bookmarked = $4, incorrect = $5, selected_option = $6
WHERE user_id = $1 AND question_id = $2
`

type UpdateUserQuestionParams struct {
	UserID         int32         `json:"user_id"`
	QuestionID     int32         `json:"question_id"`
	IsSolved       sql.NullBool  `json:"is_solved"`
	IsBookmarked   sql.NullBool  `json:"is_bookmarked"`
	Incorrect      bool          `json:"incorrect"`
	SelectedOption sql.NullInt32 `json:"selected_option"`
}

func (q *Queries) UpdateUserQuestion(ctx context.Context, arg UpdateUserQuestionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserQuestion,
		arg.UserID,
		arg.QuestionID,
		arg.IsSolved,
		arg.IsBookmarked,
		arg.Incorrect,
		arg.SelectedOption,
	)
	return err
}

const updateUserQuestionData = `-- name: UpdateUserQuestionData :one
UPDATE user_questions
SET 
    is_solved = $3,
    is_bookmarked = $4,
    time_taken = $5,
    incorrect = $6,
    selected_option = $7
WHERE user_id = $1 AND question_id = $2
RETURNING id, user_id, question_id, is_solved, is_bookmarked, time_taken, created_at, incorrect, selected_option
`

type UpdateUserQuestionDataParams struct {
	UserID         int32         `json:"user_id"`
	QuestionID     int32         `json:"question_id"`
	IsSolved       sql.NullBool  `json:"is_solved"`
	IsBookmarked   sql.NullBool  `json:"is_bookmarked"`
	TimeTaken      sql.NullInt32 `json:"time_taken"`
	Incorrect      bool          `json:"incorrect"`
	SelectedOption sql.NullInt32 `json:"selected_option"`
}

func (q *Queries) UpdateUserQuestionData(ctx context.Context, arg UpdateUserQuestionDataParams) (UserQuestion, error) {
	row := q.db.QueryRowContext(ctx, updateUserQuestionData,
		arg.UserID,
		arg.QuestionID,
		arg.IsSolved,
		arg.IsBookmarked,
		arg.TimeTaken,
		arg.Incorrect,
		arg.SelectedOption,
	)
	var i UserQuestion
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.IsSolved,
		&i.IsBookmarked,
		&i.TimeTaken,
		&i.CreatedAt,
		&i.Incorrect,
		&i.SelectedOption,
	)
	return i, err
}
